@app.route('/login', methods=['POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        
        # Verificar correo electrónico y contraseña
        usuario = usuarios_df[(usuarios_df['correo'] == email) & (usuarios_df['contraseña'] == password)]
        if usuario.empty:
            return jsonify({'resultado': 'Correo o contraseña incorrectos'})

        # Verificar si el usuario es administrador
        es_admin = usuario.iloc[0]['es_admin']
        session['es_admin'] = bool(es_admin)

        # Almacenar más información del usuario en la sesión
        session['nombre'] = usuario.iloc[0]['nombre']
        session['correo'] = email
        
        # Generar un token único para la sesión y almacenarlo en el dataframe
        token = secrets.token_hex(16)
        session['token'] = token
        usuarios_df.at[usuario.index[0], 'token'] = token
        
        # Guardar el dataframe actualizado en el archivo Excel
        usuarios_df.to_excel('base.xlsx', index=False)
        
        return jsonify({'resultado': 'Inicio de sesión exitoso', 'token': token})

    return jsonify({'resultado': 'Error en la solicitud'})

@app.route('/votar', methods=['POST'])
def votar():
    # Obtener el grupo por el que se está votando desde la solicitud
    grupo_votado = int(request.get_json()['grupo'])

    # Obtener el token del usuario actual
    token_usuario = session.get('token', None)

    # Verificar si el usuario está autenticado y tiene un token único válido
    if token_usuario is None:
        return jsonify({'resultado': 'Usuario no autenticado'})

    # Verificar si el usuario ya ha votado antes
    if token_usuario in usuarios_votaron:
        return jsonify({'resultado': 'Ya has votado anteriormente'})

    # Registrar que el usuario ha votado
    usuarios_votaron[token_usuario] = grupo_votado

    # Actualizar la columna voto en el archivo Excel para el usuario actual y el grupo votado
    usuarios_df.loc[usuarios_df['token'] == token_usuario, 'voto'] = grupo_votado
    usuarios_df.to_excel('base.xlsx', index=False)

    # Incrementar el conteo de votos para el grupo votado
    votos[str(grupo_votado)] += 1  # Convertir grupo_votado a una cadena aquí

    logging.info(f'Usuario con token {token_usuario} votó por el grupo {grupo_votado}. Votos actuales: {votos}')

    # Emitir un mensaje WebSocket informando sobre el voto realizado
    socketio.emit('voto_registrado', {'usuario': token_usuario, 'grupo_votado': grupo_votado})

    return jsonify({'resultado': 'Voto registrado correctamente'})@app.route('/reiniciar_votaciones', methods=['POST'])
    
def reiniciar_votaciones():
    global usuarios_votaron
    usuarios_votaron = {}  # Usar un diccionario en lugar de un conjunto

    # Reiniciar la información de votación para todos los usuarios en el dataframe
    usuarios_df['voto'] = None
    usuarios_df.to_excel('base.xlsx', index=False)

    # Emitir un mensaje WebSocket informando sobre la reinicialización de votaciones
    socketio.emit('votaciones_reiniciadas', {})

    return jsonify({'resultado': 'Votaciones reiniciadas correctamente'})

